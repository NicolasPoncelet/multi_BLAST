from script import output_files, blast_results, fasta_utils
from script.extract_utils import get_extracted_seqs 
from script.output_extract_files import generate_output_path
import yaml, numpy as np
import pandas as pd
from pathlib import Path

configfile: "config/config.yaml"

# Chargement de la configuration

with open(Path("config/config.yaml"), "r") as infile:
    config_yaml = yaml.load(infile, Loader=yaml.SafeLoader)

ASSEMBLY_DIR = Path(config_yaml["assemblies_dir"]).resolve()
QUERY_DIR = Path(config_yaml["queries_dir"]).resolve()
OUTPUT_DIR = Path(config_yaml["analysis_dir"]).resolve()

REPORT_PATH = {
    "blastn": OUTPUT_DIR / "BLASTN",
    "tblastn": OUTPUT_DIR / "TBLASTN",
    "tblastx": OUTPUT_DIR / "TBLASTX"
}.get(config_yaml["blast_type"], "")


# ---------------------------------------------------------------------------------
# RÃ¨gles Snakemake
# ---------------------------------------------------------------------------------

rule all:
    input:
        output_files.get(),
        lambda wildcards: get_extracted_seqs(checkpoints.BLAST_report.get(**wildcards).output.compiled_report,config_yaml)

rule move_fasta:
    """Move FASTA file into db dir. """
    input:
        assemblies = f"{ASSEMBLY_DIR}/{{assembly}}.fasta",
    output:
        fasta_files = f'{OUTPUT_DIR}/Database_nuc/{{assembly}}.fasta'
    shell:
        """
        cp {input.assemblies} {output.fasta_files}
        """

rule make_BLAST_db:
    """Create BLASTN Database from assembly."""
    input:
        assemblies = rules.move_fasta.output.fasta_files 

    output:
        db_nto = f'{OUTPUT_DIR}/Database_nuc/{{assembly}}.nto',
        db_ntf = f'{OUTPUT_DIR}/Database_nuc/{{assembly}}.ntf',
        db_nsq = f'{OUTPUT_DIR}/Database_nuc/{{assembly}}.nsq',
        db_not = f'{OUTPUT_DIR}/Database_nuc/{{assembly}}.not',
        db_njs = f'{OUTPUT_DIR}/Database_nuc/{{assembly}}.njs',
        db_nin = f'{OUTPUT_DIR}/Database_nuc/{{assembly}}.nin',
        db_nhr = f'{OUTPUT_DIR}/Database_nuc/{{assembly}}.nhr',
    conda:
        "envs/blast.yaml"
    shell:
        """
        makeblastdb \
        -in {input.assemblies} \
        -dbtype nucl \
        -out {OUTPUT_DIR}/Database_nuc/{wildcards.assembly} 
        """

rule BLASTN_query:
    """BLASTN query in Database_nuc"""
    input:
        db_files=rules.make_BLAST_db.output, 
        query=f"{QUERY_DIR}/{{query}}.fasta",
        assemblies=rules.move_fasta.output
    output:
        BLASTN_out=f"{OUTPUT_DIR}/BLASTN/{{assembly}}/{{query}}_out_blast.txt"
    conda:
        "envs/blast.yaml"
    params:
        header = config_yaml["header_report"]
    shell:
        """
        blastn \
        -task blastn \
        -query {input.query} \
        -db {OUTPUT_DIR}/Database_nuc/{wildcards.assembly} \
        -out {output.BLASTN_out} \
        -evalue 1e-5 \
        -outfmt '6 {params.header}'
        """

rule TBLASTX_query:
    """TBLASTX query in nucleotide database"""
    input:
        db_files=rules.make_BLAST_db.output, 
        query=f"{QUERY_DIR}/{{query}}.fasta",
        assemblies=rules.move_fasta.output
    output:
        blast_out=f"{OUTPUT_DIR}/TBLASTX/{{assembly}}/{{query}}_out_blast.txt"
    conda:
        "envs/blast.yaml"
    params:
        header = config_yaml["header_report"]
    shell:
        """
        tblastx \
        -query {input.query} \
        -db {OUTPUT_DIR}/Database_nuc/{wildcards.assembly} \
        -out {output.blast_out} \
        -evalue 1e-5 \
        -outfmt '6 {params.header}'
        """

rule TBLASTN_query:
    """TBLASTN query in nucleotide database"""
    input:
        db_files=rules.make_BLAST_db.output, 
        query=f"{QUERY_DIR}/{{query}}.fasta",
        assemblies=rules.move_fasta.output
    output:
        blast_out=f"{OUTPUT_DIR}/TBLASTN/{{assembly}}/{{query}}_out_blast.txt"
    conda:
        "envs/blast.yaml"
    params:
        header = config_yaml["header_report"]
    shell:
        """
        tblastn \
        -query {input.query} \
        -db {OUTPUT_DIR}/Database_nuc/{wildcards.assembly} \
        -out {output.blast_out} \
        -evalue 1e-5 \
        -outfmt '6 {params.header}'
        """

checkpoint BLAST_report:
    input:
        blastn_files = expand(
            f"{OUTPUT_DIR}/BLASTN/{{assembly}}/{{query}}_out_blast.txt",
            assembly=[a.stem for a in ASSEMBLY_DIR.glob("*.fasta")],
            query=[q.stem for q in QUERY_DIR.glob("*.fasta")]
        ) if config_yaml["blast_type"] == "blastn" else [],
        tblastx_files = expand(
            f"{OUTPUT_DIR}/TBLASTX/{{assembly}}/{{query}}_out_blast.txt",
            assembly=[a.stem for a in ASSEMBLY_DIR.glob("*.fasta")],
            query=[q.stem for q in QUERY_DIR.glob("*.fasta")]
        ) if config_yaml["blast_type"] == "tblastx" else [],
        tblastn_files = expand(
            f"{OUTPUT_DIR}/TBLASTN/{{assembly}}/{{query}}_out_blast.txt",
            assembly=[a.stem for a in ASSEMBLY_DIR.glob("*.fasta")],
            query=[q.stem for q in QUERY_DIR.glob("*.fasta")]
        ) if config_yaml["blast_type"] == "tblastn" else []
    params:
        header = config_yaml["header_report"]
    output:
        compiled_report = f"{REPORT_PATH}/compiled_results.csv"
    run:
        header_report = params.header.split()
        
        if config_yaml["blast_type"] == "blastn":

            blast_results.compile(
                f'{OUTPUT_DIR}/BLASTN',
                output.compiled_report,
                header_report
            )
        elif config_yaml["blast_type"] == "tblastx":

            blast_results.compile(
                f'{OUTPUT_DIR}/TBLASTX',
                output.compiled_report,
                header_report
            )
        elif config_yaml["blast_type"] == "tblastn":

            blast_results.compile(
                f'{OUTPUT_DIR}/TBLASTN',
                output.compiled_report,
                header_report
            )
rule index_assembly:
    input:
        fasta = rules.move_fasta.output.fasta_files
    output:
        fai = f"{OUTPUT_DIR}/Database_nuc/{{assembly}}.fasta.fai"
    shell:
        "samtools faidx {input.fasta} "

# Files are coming from extract_utils in rule all.

rule extract_sequences:
    input:
        fasta = rules.move_fasta.output.fasta_files
    output:
        generate_output_path(config_yaml) # generate path and wildcards pattern regarding config extraction selection.
    params:
        region = lambda wildcards: f"{wildcards.sseqid}:{wildcards.sstart}-{wildcards.send}"
    run:

        reverse = wildcards.strand == "minus"

        if reverse:
            cmd = f"samtools faidx -i {input.fasta} {params.region} > {output}"
            
        else:
            cmd = f"samtools faidx {input.fasta} {params.region} > {output}"

        shell(cmd)

rule combine_FASTA:
    input:
        lambda wildcards: get_extracted_seqs(
            checkpoints.BLAST_report.get(**wildcards).output.compiled_report,
            config_yaml
        )
    output:
        combined_fasta = f"{OUTPUT_DIR}/Extracted_Seqs/combined.fasta"
    run:
        fasta_utils.combine_fasta(input,output.combined_fasta)